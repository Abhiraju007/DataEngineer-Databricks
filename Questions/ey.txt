Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:
                                          '.' Matches any single character.
                                          '*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).
 
Example 1:
Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
 
Example 2:
Input: s = "aa", p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
 
Example 3:
Input: s = "ab", p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
 
 
Constraints:
1 <= s.length <= 20
1 <= p.length <= 20
s contains only lowercase English letters.
p contains only lowercase English letters, '.', and '*'.
It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.

s='aaaabbbb' and p='*ab*b'

def string_match(s,p):
 l = []  #ab
 y = []  #*
    for i in s:
        if s[i] == p :
            l.append(i)
        else: 
            y.append(i)

if s = p.startwith("*") or p.endwith("*"):
     print("True")
elif s = p.startwith(".") or p.endwith("."):
     print("True")
elif s = p.startwith(".") or p.endwith("*"):
    print("True")
s = p.startwith("*") or p.endwith("."):
    print("True")
else:
    print("False")




def isMatch(self, s: str, p: str) -> bool:
        @cachedef dfs(i, j):
            if j >= n:
                return i == m if j + 1 < n and p[j + 1] == '*':
                return dfs(i, j + 2) or (
                    i < m and (s[i] == p[j] or p[j] == '.') and dfs(i + 1, j)
                )            return i < m and (s[i] == p[j] or p[j] == '.') and dfs(i + 1, j + 1)

        m, n = len(s), len(p)
        return dfs(0, 0)


Table 1
EmpID, Name, Dept, Salary

Nth highest salary of each department

With CTE
AS
(
Select EmpId,Name,Dept, Dense_Rank() over(partition by Dept, order by salary desc) as rnk from Table
)

Select * from CTE where rnk = 2
      
       